{
  "version": 3,
  "sources": ["../../noisejs/index.js"],
  "sourcesContent": ["/*\n * A speed-improved perlin and simplex noise algorithms for 2D.\n *\n * Based on example code by Stefan Gustavson (stegu@itn.liu.se).\n * Optimisations by Peter Eastman (peastman@drizzle.stanford.edu).\n * Better rank ordering method by Stefan Gustavson in 2012.\n * Converted to Javascript by Joseph Gentle.\n *\n * Version 2012-03-09\n *\n * This code was placed in the public domain by its original author,\n * Stefan Gustavson. You may use it as you see fit, but\n * attribution is appreciated.\n *\n */\n\n(function(global){\n\n  // Passing in seed will seed this Noise instance\n  function Noise(seed) {\n    function Grad(x, y, z) {\n      this.x = x; this.y = y; this.z = z;\n    }\n\n    Grad.prototype.dot2 = function(x, y) {\n      return this.x*x + this.y*y;\n    };\n\n    Grad.prototype.dot3 = function(x, y, z) {\n      return this.x*x + this.y*y + this.z*z;\n    };\n\n    this.grad3 = [new Grad(1,1,0),new Grad(-1,1,0),new Grad(1,-1,0),new Grad(-1,-1,0),\n                 new Grad(1,0,1),new Grad(-1,0,1),new Grad(1,0,-1),new Grad(-1,0,-1),\n                 new Grad(0,1,1),new Grad(0,-1,1),new Grad(0,1,-1),new Grad(0,-1,-1)];\n\n    this.p = [151,160,137,91,90,15,\n    131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,\n    190, 6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,\n    88,237,149,56,87,174,20,125,136,171,168, 68,175,74,165,71,134,139,48,27,166,\n    77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,\n    102,143,54, 65,25,63,161, 1,216,80,73,209,76,132,187,208, 89,18,169,200,196,\n    135,130,116,188,159,86,164,100,109,198,173,186, 3,64,52,217,226,250,124,123,\n    5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,\n    223,183,170,213,119,248,152, 2,44,154,163, 70,221,153,101,155,167, 43,172,9,\n    129,22,39,253, 19,98,108,110,79,113,224,232,178,185, 112,104,218,246,97,228,\n    251,34,242,193,238,210,144,12,191,179,162,241, 81,51,145,235,249,14,239,107,\n    49,192,214, 31,181,199,106,157,184, 84,204,176,115,121,50,45,127, 4,150,254,\n    138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180];\n    // To remove the need for index wrapping, double the permutation table length\n    this.perm = new Array(512);\n    this.gradP = new Array(512);\n\n    this.seed(seed || 0);\n  }\n\n  // This isn't a very good seeding function, but it works ok. It supports 2^16\n  // different seed values. Write something better if you need more seeds.\n  Noise.prototype.seed = function(seed) {\n    if(seed > 0 && seed < 1) {\n      // Scale the seed out\n      seed *= 65536;\n    }\n\n    seed = Math.floor(seed);\n    if(seed < 256) {\n      seed |= seed << 8;\n    }\n\n    var p = this.p;\n    for(var i = 0; i < 256; i++) {\n      var v;\n      if (i & 1) {\n        v = p[i] ^ (seed & 255);\n      } else {\n        v = p[i] ^ ((seed>>8) & 255);\n      }\n\n      var perm = this.perm;\n      var gradP = this.gradP;\n      perm[i] = perm[i + 256] = v;\n      gradP[i] = gradP[i + 256] = this.grad3[v % 12];\n    }\n  };\n\n  /*\n  for(var i=0; i<256; i++) {\n    perm[i] = perm[i + 256] = p[i];\n    gradP[i] = gradP[i + 256] = grad3[perm[i] % 12];\n  }*/\n\n  // Skewing and unskewing factors for 2, 3, and 4 dimensions\n  var F2 = 0.5*(Math.sqrt(3)-1);\n  var G2 = (3-Math.sqrt(3))/6;\n\n  var F3 = 1/3;\n  var G3 = 1/6;\n\n  // 2D simplex noise\n  Noise.prototype.simplex2 = function(xin, yin) {\n    var n0, n1, n2; // Noise contributions from the three corners\n    // Skew the input space to determine which simplex cell we're in\n    var s = (xin+yin)*F2; // Hairy factor for 2D\n    var i = Math.floor(xin+s);\n    var j = Math.floor(yin+s);\n    var t = (i+j)*G2;\n    var x0 = xin-i+t; // The x,y distances from the cell origin, unskewed.\n    var y0 = yin-j+t;\n    // For the 2D case, the simplex shape is an equilateral triangle.\n    // Determine which simplex we are in.\n    var i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords\n    if(x0>y0) { // lower triangle, XY order: (0,0)->(1,0)->(1,1)\n      i1=1; j1=0;\n    } else {    // upper triangle, YX order: (0,0)->(0,1)->(1,1)\n      i1=0; j1=1;\n    }\n    // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n    // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n    // c = (3-sqrt(3))/6\n    var x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\n    var y1 = y0 - j1 + G2;\n    var x2 = x0 - 1 + 2 * G2; // Offsets for last corner in (x,y) unskewed coords\n    var y2 = y0 - 1 + 2 * G2;\n    // Work out the hashed gradient indices of the three simplex corners\n    i &= 255;\n    j &= 255;\n\n    var perm = this.perm;\n    var gradP = this.gradP;\n    var gi0 = gradP[i+perm[j]];\n    var gi1 = gradP[i+i1+perm[j+j1]];\n    var gi2 = gradP[i+1+perm[j+1]];\n    // Calculate the contribution from the three corners\n    var t0 = 0.5 - x0*x0-y0*y0;\n    if(t0<0) {\n      n0 = 0;\n    } else {\n      t0 *= t0;\n      n0 = t0 * t0 * gi0.dot2(x0, y0);  // (x,y) of grad3 used for 2D gradient\n    }\n    var t1 = 0.5 - x1*x1-y1*y1;\n    if(t1<0) {\n      n1 = 0;\n    } else {\n      t1 *= t1;\n      n1 = t1 * t1 * gi1.dot2(x1, y1);\n    }\n    var t2 = 0.5 - x2*x2-y2*y2;\n    if(t2<0) {\n      n2 = 0;\n    } else {\n      t2 *= t2;\n      n2 = t2 * t2 * gi2.dot2(x2, y2);\n    }\n    // Add contributions from each corner to get the final noise value.\n    // The result is scaled to return values in the interval [-1,1].\n    return 70 * (n0 + n1 + n2);\n  };\n\n  // 3D simplex noise\n  Noise.prototype.simplex3 = function(xin, yin, zin) {\n    var n0, n1, n2, n3; // Noise contributions from the four corners\n\n    // Skew the input space to determine which simplex cell we're in\n    var s = (xin+yin+zin)*F3; // Hairy factor for 2D\n    var i = Math.floor(xin+s);\n    var j = Math.floor(yin+s);\n    var k = Math.floor(zin+s);\n\n    var t = (i+j+k)*G3;\n    var x0 = xin-i+t; // The x,y distances from the cell origin, unskewed.\n    var y0 = yin-j+t;\n    var z0 = zin-k+t;\n\n    // For the 3D case, the simplex shape is a slightly irregular tetrahedron.\n    // Determine which simplex we are in.\n    var i1, j1, k1; // Offsets for second corner of simplex in (i,j,k) coords\n    var i2, j2, k2; // Offsets for third corner of simplex in (i,j,k) coords\n    if(x0 >= y0) {\n      if(y0 >= z0)      { i1=1; j1=0; k1=0; i2=1; j2=1; k2=0; }\n      else if(x0 >= z0) { i1=1; j1=0; k1=0; i2=1; j2=0; k2=1; }\n      else              { i1=0; j1=0; k1=1; i2=1; j2=0; k2=1; }\n    } else {\n      if(y0 < z0)      { i1=0; j1=0; k1=1; i2=0; j2=1; k2=1; }\n      else if(x0 < z0) { i1=0; j1=1; k1=0; i2=0; j2=1; k2=1; }\n      else             { i1=0; j1=1; k1=0; i2=1; j2=1; k2=0; }\n    }\n    // A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\n    // a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and\n    // a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where\n    // c = 1/6.\n    var x1 = x0 - i1 + G3; // Offsets for second corner\n    var y1 = y0 - j1 + G3;\n    var z1 = z0 - k1 + G3;\n\n    var x2 = x0 - i2 + 2 * G3; // Offsets for third corner\n    var y2 = y0 - j2 + 2 * G3;\n    var z2 = z0 - k2 + 2 * G3;\n\n    var x3 = x0 - 1 + 3 * G3; // Offsets for fourth corner\n    var y3 = y0 - 1 + 3 * G3;\n    var z3 = z0 - 1 + 3 * G3;\n\n    // Work out the hashed gradient indices of the four simplex corners\n    i &= 255;\n    j &= 255;\n    k &= 255;\n\n    var perm = this.perm;\n    var gradP = this.gradP;\n    var gi0 = gradP[i+   perm[j+   perm[k   ]]];\n    var gi1 = gradP[i+i1+perm[j+j1+perm[k+k1]]];\n    var gi2 = gradP[i+i2+perm[j+j2+perm[k+k2]]];\n    var gi3 = gradP[i+ 1+perm[j+ 1+perm[k+ 1]]];\n\n    // Calculate the contribution from the four corners\n    var t0 = 0.5 - x0*x0-y0*y0-z0*z0;\n    if(t0<0) {\n      n0 = 0;\n    } else {\n      t0 *= t0;\n      n0 = t0 * t0 * gi0.dot3(x0, y0, z0);  // (x,y) of grad3 used for 2D gradient\n    }\n    var t1 = 0.5 - x1*x1-y1*y1-z1*z1;\n    if(t1<0) {\n      n1 = 0;\n    } else {\n      t1 *= t1;\n      n1 = t1 * t1 * gi1.dot3(x1, y1, z1);\n    }\n    var t2 = 0.5 - x2*x2-y2*y2-z2*z2;\n    if(t2<0) {\n      n2 = 0;\n    } else {\n      t2 *= t2;\n      n2 = t2 * t2 * gi2.dot3(x2, y2, z2);\n    }\n    var t3 = 0.5 - x3*x3-y3*y3-z3*z3;\n    if(t3<0) {\n      n3 = 0;\n    } else {\n      t3 *= t3;\n      n3 = t3 * t3 * gi3.dot3(x3, y3, z3);\n    }\n    // Add contributions from each corner to get the final noise value.\n    // The result is scaled to return values in the interval [-1,1].\n    return 32 * (n0 + n1 + n2 + n3);\n\n  };\n\n  // ##### Perlin noise stuff\n\n  function fade(t) {\n    return t*t*t*(t*(t*6-15)+10);\n  }\n\n  function lerp(a, b, t) {\n    return (1-t)*a + t*b;\n  }\n\n  // 2D Perlin Noise\n  Noise.prototype.perlin2 = function(x, y) {\n    // Find unit grid cell containing point\n    var X = Math.floor(x), Y = Math.floor(y);\n    // Get relative xy coordinates of point within that cell\n    x = x - X; y = y - Y;\n    // Wrap the integer cells at 255 (smaller integer period can be introduced here)\n    X = X & 255; Y = Y & 255;\n\n    // Calculate noise contributions from each of the four corners\n    var perm = this.perm;\n    var gradP = this.gradP;\n    var n00 = gradP[X+perm[Y]].dot2(x, y);\n    var n01 = gradP[X+perm[Y+1]].dot2(x, y-1);\n    var n10 = gradP[X+1+perm[Y]].dot2(x-1, y);\n    var n11 = gradP[X+1+perm[Y+1]].dot2(x-1, y-1);\n\n    // Compute the fade curve value for x\n    var u = fade(x);\n\n    // Interpolate the four results\n    return lerp(\n        lerp(n00, n10, u),\n        lerp(n01, n11, u),\n       fade(y));\n  };\n\n  // 3D Perlin Noise\n  Noise.prototype.perlin3 = function(x, y, z) {\n    // Find unit grid cell containing point\n    var X = Math.floor(x), Y = Math.floor(y), Z = Math.floor(z);\n    // Get relative xyz coordinates of point within that cell\n    x = x - X; y = y - Y; z = z - Z;\n    // Wrap the integer cells at 255 (smaller integer period can be introduced here)\n    X = X & 255; Y = Y & 255; Z = Z & 255;\n\n    // Calculate noise contributions from each of the eight corners\n    var perm = this.perm;\n    var gradP = this.gradP;\n    var n000 = gradP[X+  perm[Y+  perm[Z  ]]].dot3(x,   y,     z);\n    var n001 = gradP[X+  perm[Y+  perm[Z+1]]].dot3(x,   y,   z-1);\n    var n010 = gradP[X+  perm[Y+1+perm[Z  ]]].dot3(x,   y-1,   z);\n    var n011 = gradP[X+  perm[Y+1+perm[Z+1]]].dot3(x,   y-1, z-1);\n    var n100 = gradP[X+1+perm[Y+  perm[Z  ]]].dot3(x-1,   y,   z);\n    var n101 = gradP[X+1+perm[Y+  perm[Z+1]]].dot3(x-1,   y, z-1);\n    var n110 = gradP[X+1+perm[Y+1+perm[Z  ]]].dot3(x-1, y-1,   z);\n    var n111 = gradP[X+1+perm[Y+1+perm[Z+1]]].dot3(x-1, y-1, z-1);\n\n    // Compute the fade curve value for x, y, z\n    var u = fade(x);\n    var v = fade(y);\n    var w = fade(z);\n\n    // Interpolate\n    return lerp(\n        lerp(\n          lerp(n000, n100, u),\n          lerp(n001, n101, u), w),\n        lerp(\n          lerp(n010, n110, u),\n          lerp(n011, n111, u), w),\n       v);\n  };\n\n  global.Noise = Noise;\n\n})(typeof module === \"undefined\" ? this : module.exports);\n"],
  "mappings": ";;;;;AAAA;AAAA;AAgBA,KAAC,SAAS,QAAO;AAGf,eAAS,MAAM,MAAM;AACnB,iBAAS,KAAK,GAAG,GAAG,GAAG;AACrB,eAAK,IAAI;AAAG,eAAK,IAAI;AAAG,eAAK,IAAI;AAAA,QACnC;AAEA,aAAK,UAAU,OAAO,SAAS,GAAG,GAAG;AACnC,iBAAO,KAAK,IAAE,IAAI,KAAK,IAAE;AAAA,QAC3B;AAEA,aAAK,UAAU,OAAO,SAAS,GAAG,GAAG,GAAG;AACtC,iBAAO,KAAK,IAAE,IAAI,KAAK,IAAE,IAAI,KAAK,IAAE;AAAA,QACtC;AAEA,aAAK,QAAQ;AAAA,UAAC,IAAI,KAAK,GAAE,GAAE,CAAC;AAAA,UAAE,IAAI,KAAK,IAAG,GAAE,CAAC;AAAA,UAAE,IAAI,KAAK,GAAE,IAAG,CAAC;AAAA,UAAE,IAAI,KAAK,IAAG,IAAG,CAAC;AAAA,UACnE,IAAI,KAAK,GAAE,GAAE,CAAC;AAAA,UAAE,IAAI,KAAK,IAAG,GAAE,CAAC;AAAA,UAAE,IAAI,KAAK,GAAE,GAAE,EAAE;AAAA,UAAE,IAAI,KAAK,IAAG,GAAE,EAAE;AAAA,UAClE,IAAI,KAAK,GAAE,GAAE,CAAC;AAAA,UAAE,IAAI,KAAK,GAAE,IAAG,CAAC;AAAA,UAAE,IAAI,KAAK,GAAE,GAAE,EAAE;AAAA,UAAE,IAAI,KAAK,GAAE,IAAG,EAAE;AAAA,QAAC;AAEhF,aAAK,IAAI;AAAA,UAAC;AAAA,UAAI;AAAA,UAAI;AAAA,UAAI;AAAA,UAAG;AAAA,UAAG;AAAA,UAC5B;AAAA,UAAI;AAAA,UAAG;AAAA,UAAI;AAAA,UAAG;AAAA,UAAG;AAAA,UAAG;AAAA,UAAI;AAAA,UAAI;AAAA,UAAE;AAAA,UAAI;AAAA,UAAI;AAAA,UAAG;AAAA,UAAI;AAAA,UAAG;AAAA,UAAG;AAAA,UAAI;AAAA,UAAE;AAAA,UAAG;AAAA,UAAG;AAAA,UAAI;AAAA,UAAG;AAAA,UAAG;AAAA,UACzE;AAAA,UAAK;AAAA,UAAE;AAAA,UAAI;AAAA,UAAI;AAAA,UAAI;AAAA,UAAI;AAAA,UAAG;AAAA,UAAE;AAAA,UAAG;AAAA,UAAI;AAAA,UAAG;AAAA,UAAG;AAAA,UAAI;AAAA,UAAI;AAAA,UAAI;AAAA,UAAI;AAAA,UAAG;AAAA,UAAG;AAAA,UAAG;AAAA,UAAG;AAAA,UAAI;AAAA,UACzE;AAAA,UAAG;AAAA,UAAI;AAAA,UAAI;AAAA,UAAG;AAAA,UAAG;AAAA,UAAI;AAAA,UAAG;AAAA,UAAI;AAAA,UAAI;AAAA,UAAI;AAAA,UAAK;AAAA,UAAG;AAAA,UAAI;AAAA,UAAG;AAAA,UAAI;AAAA,UAAG;AAAA,UAAI;AAAA,UAAI;AAAA,UAAG;AAAA,UAAG;AAAA,UACxE;AAAA,UAAG;AAAA,UAAI;AAAA,UAAI;AAAA,UAAI;AAAA,UAAG;AAAA,UAAI;AAAA,UAAI;AAAA,UAAI;AAAA,UAAG;AAAA,UAAI;AAAA,UAAI;AAAA,UAAI;AAAA,UAAI;AAAA,UAAI;AAAA,UAAG;AAAA,UAAG;AAAA,UAAG;AAAA,UAAG;AAAA,UAAI;AAAA,UAAG;AAAA,UACxE;AAAA,UAAI;AAAA,UAAI;AAAA,UAAI;AAAA,UAAG;AAAA,UAAG;AAAA,UAAG;AAAA,UAAK;AAAA,UAAE;AAAA,UAAI;AAAA,UAAG;AAAA,UAAG;AAAA,UAAI;AAAA,UAAG;AAAA,UAAI;AAAA,UAAI;AAAA,UAAK;AAAA,UAAG;AAAA,UAAG;AAAA,UAAI;AAAA,UAAI;AAAA,UACxE;AAAA,UAAI;AAAA,UAAI;AAAA,UAAI;AAAA,UAAI;AAAA,UAAI;AAAA,UAAG;AAAA,UAAI;AAAA,UAAI;AAAA,UAAI;AAAA,UAAI;AAAA,UAAI;AAAA,UAAK;AAAA,UAAE;AAAA,UAAG;AAAA,UAAG;AAAA,UAAI;AAAA,UAAI;AAAA,UAAI;AAAA,UAAI;AAAA,UACxE;AAAA,UAAE;AAAA,UAAI;AAAA,UAAG;AAAA,UAAI;AAAA,UAAI;AAAA,UAAI;AAAA,UAAI;AAAA,UAAG;AAAA,UAAG;AAAA,UAAI;AAAA,UAAI;AAAA,UAAI;AAAA,UAAG;AAAA,UAAI;AAAA,UAAG;AAAA,UAAG;AAAA,UAAG;AAAA,UAAG;AAAA,UAAI;AAAA,UAAI;AAAA,UAAG;AAAA,UACzE;AAAA,UAAI;AAAA,UAAI;AAAA,UAA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",
  "names": []
}
